# -*- coding: utf-8 -*-
"""SAVERAPP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FwuDXOXxyVM1D9icqnQp0pj1Y9O440bs

# SAVER APP
### Algorithm using hash tables

Mayca Valdecantos, Javier Torremocha, Micaela San Mart√≠n, Almudena Poveda and Marta Valencia
"""

import numpy as np
import pandas as pd
from datetime import date
from IPython.display import display_html

"""### 1. CREATING THE ACCOUNT """

print("WELCOME TO SAVERAPP")
print("")

first = (input("Do you already have an account? (yes/no)")).lower()

if first == "yes":
    user = input("User: ")
    password = input("Password: ")
    print("")
    print(f"HELLO {user}! IN ORDER TO TRACK YOUR EXPENSES CORRECTLY, WE WILL NEED MORE INFORMATION ABOUT YOU.")
    print("")
    monthly = float(input("What is your monthly budget?"))
    save = float(input("What percentage do you want to save (e.g. 10)"))
    money = monthly - monthly*save/100
    print(f"You can spend {money} this month")
    initial_percentage = 100

    interests = {}
    print("")
    print("Now, you need to add categories and add the percentage of your budget you want to spend in each of them")
    print("")
    while True:
        interest = input('Enter a category. Press <Enter> when you have 0% of your budget left: ')
        if interest == "":
            break
        percentage = float(input('Enter the percentage you want to spend on ' + interest + ': '))
        amount = money*percentage/100
        print(f"You can spend {amount} on {interest} this month")
        initial_percentage -= percentage
        print(f"{initial_percentage}% of your monthly budget left")
        print("")
        interests[interest] = amount
        amounts = list(interests.values())
        interests_list = list(interests.keys())
        
    print("")
    print('CATEGORIES:')
    for interest, amount in interests.items():
        print(f"{interest:20}   {amount:20}")

    print("")
    print(f"TOTAL EXPENSES FOR THIS MONTH: {sum(amounts)}")
    savings = money+monthly*(save/100)
    print(f"TOTAL SAVINGS FOR THIS MONTH: {monthly*save/100}")

    
elif first == "no":
    email = input("Email adress: ")
    newpassword = input("Password: ")
    user = input("User: ")

    print("")
    print(f"HELLO {user}! IN ORDER TO TRACK YOUR EXPENSES CORRECTLY, WE WILL NEED MORE INFORMATION ABOUT YOU.")
    print("")
    monthly = float(input("What is your monthly budget?"))
    save = float(input("What percentage do you want to save (e.g. 10)"))
    money = monthly - monthly*save/100
    print(f"You can spend {money} this month")
    initial_percentage = 100

    interests = {}
    print("")
    print("Now, you need to add categories and add the percentage of your budget you want to spend in each of them")
    print("")
    while True:
        interest = input('Enter a category. Press <Enter> when you have 0% of your budget left: ')
        if interest == "":
            break
        percentage = float(input('Enter the percentage you want to spend on ' + interest + ': '))
        amount = money*percentage/100
        print(f"You can spend {amount} on {interest} this month")
        initial_percentage -= percentage
        print(f"{initial_percentage}% of your monthly budget left")
        print("")
        interests[interest] = amount
        amounts = list(interests.values())
        interests_list = list(interests.keys())
        
    print("")
    print('CATEGORIES:')
    for interest, amount in interests.items():
        print(f"{interest:20}   {amount:20}")

    print("")
    print(f"TOTAL EXPENSES FOR THIS MONTH: {sum(amounts)}")
    savings = money+monthly*(save/100)
    print(f"TOTAL SAVINGS FOR THIS MONTH: {monthly*save/100}")

else:
    print("Please try again")

"""### 2. CHECK CATEGORIES"""

print(f'THIS ARE YOUR CATEGORIES AND THE MAXIMUM YOU CAN SPEND ON EACH FROM YOUR MONTHLY BUDGET IN ORDER TO SAVE {monthly*save/100}$')
print("")
df = pd.DataFrame(list(zip(interests_list, amounts )), columns =['CATEGORY', 'MAX $'])
df

"""### 3. RECORDING EXPENSES"""

Goods = []
Prices = []
Dates = []
Expense_type = []

def new_expense (good, price, date, e_type):
    Goods.append(good)
    Prices.append(price)
    Dates.append(date)
    Expense_type.append(e_type)

print("NOW IT'S TIME TO START RECORDING YOUR EXPENSES! Remember your objectives!")
print("")
print("Choose an option (e.g. 3)")
print("")
user_input = -1

while(user_input != 0):
    number = 0
    interests_list_number = 1
    tracker = {}
    tracker["Exit"] = 0
    for interest in interests_list:
        number += 0
        tracker[f"Add {interest} expense"] = number

    user_input = ''
    input_message = "EXPENSE TRACKER:\n"

    for i, item in enumerate(tracker):
        input_message += f'{i+1}. {item}\n'
    input_message += ''


    while user_input not in map(str, range(1, len(tracker) + 1)):
        user_input = input(input_message)
        tracker.get(user_input[:-1])

    print()

    user_input = int(user_input)

    if user_input != 1:
        e_type = (interests_list[user_input - 2])
        print(f"Adding {e_type}")


    elif user_input == 1:
        print("Exiting the program")
        print("")
        print(expense_report)
        print("")
        print(f"TOTAL EXPENSES: {sum(Prices)}/{money}")
        break

        
    else:
        print("You chose an incorrect option. Please try again")

    #allow the user to enter the good or service and the price
    if user_input != 1:
        good = input(f"Enter the good or service for the expense type {e_type}:")
        price = float(input("Enter the price of the good or service:\n"))
        today = date.today()
        new_expense(good, price, today, e_type)
        expense_report = pd.DataFrame()  
        expense_report["Goods"] = Goods
        expense_report["Prices"] = Prices
        expense_report["Dates"] = Dates
        expense_report["Expense type"] = Expense_type
        print(expense_report)
        print("")
        print(f"TOTAL EXPENSES: {sum(Prices)}/{money}")


    #print a new line
    print()

"""### 4. CHECK RECORDED EXPENSES"""

expense_report

"""### CHECK TOTAL AND MAXIMUM EXPENSES PER CATEGORY"""

p = tuple(Prices)
e = tuple(Expense_type)
lista= pd.DataFrame({'Expense type': e,'$': p})
lista2 = lista.groupby(["Expense type"]).sum()
df2 = df.groupby(["CATEGORY"]).sum()

def display_side_by_side(*args):
    html_str = ''
    for df in args:
        html_str += df.to_html()
    display_html(
        html_str.replace('table','table style="display:inline"'), 
        raw=True
    )

print("HERE YOU CAN CHECK WHAT QUANTITY YOU HAVE SPENT AND THE MAXIMUM YOU CAN SPEND PER CATEGORY")
print("")
display_side_by_side(lista2, df2)