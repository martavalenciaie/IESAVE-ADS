# -*- coding: utf-8 -*-
"""SAVERAPP definitivo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m3aHg6fvO6sVlPQRLJ4t72QK73_wrXuI

# SAVER APP
### OOP and Hash Tables

Mayca Valdecantos, Javier Torremocha, Micaela San Mart√≠n, Almudena Poveda and Marta Valencia
"""

#import libaries
import numpy as np
import pandas as pd
from datetime import date

"""### 1. CREATING THE ACCOUNT

We used Object Oriented Programming Algorithm for the login/register process.


As data structures we used hash tables: for the interests and for the tracker.
"""

class User():
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email

    def login(self):
        self.username = input("Enter your username: ")
        self.password = input("Enter your password: ")

    def register(self):
        self.email = input("Enter your email address: ")
        self.username = input("Enter your username: ")
        self.password = input("Enter your password: ")

print("SAVER APP")
print("don't spend more than you should!")
print("")

choice = (input("Do you already have an account?")).lower()
if choice == "yes":
    my_user = User("username", "password", "email")
    my_user.login()
    print(f"Welcome to SAVERAPP {my_user.username}")
elif choice == "no":
    my_user = User("username", "password", "email")
    my_user.register()
    print(f"Welcome to SAVERAPP {my_user.username}!!")


print("IN ORDER TO TRACK YOUR EXPENSES CORRECTLY, WE WILL NEED MORE INFORMATION ABOUT YOU.")
print("")
monthly = float(input("What is your monthly budget?"))
save = float(input("What percentage do you want to save (e.g. 10)"))
money = monthly - monthly*save/100
print(f"You can spend {money} this month")
initial_percentage = 100

interests = {}
print("")
print("Now, you need to add categories and add the percentage of your budget you want to spend in each of them")
print("")
while True:
    interest = input('Enter a category. Press <Enter> when you have 0% of your budget left: ')
    if interest == "":
        break
    percentage = float(input('Enter the percentage you want to spend on ' + interest + ': '))
    amount = money*percentage/100
    print(f"You can spend {amount} on {interest} this month")
    initial_percentage -= percentage
    print(f"{initial_percentage}% of your monthly budget left")
    print("")
    interests[interest] = amount
    amounts = list(interests.values())
    interests_list = list(interests.keys())
    
print("")
print('CATEGORIES:')
for interest, amount in interests.items():
    print(f"{interest:20}   {amount:20}")

print("")
print(f"TOTAL EXPENSES FOR THIS MONTH: {sum(amounts)}")
savings = money+monthly*(save/100)
print(f"TOTAL SAVINGS FOR THIS MONTH: {monthly*save/100}")

"""### 2. CHECK CATEGORIES"""

print(f'THIS ARE YOUR CATEGORIES AND THE MAXIMUM YOU CAN SPEND ON EACH FROM YOUR MONTHLY BUDGET IN ORDER TO SAVE {monthly*save/100}$')
print("")
df = pd.DataFrame(list(zip(interests_list, amounts )), columns =['CATEGORY', 'MAX $'])
df

"""### 3. RECORDING EXPENSES"""

Goods = []
Prices = []
Dates = []
Expense_type = []

def new_expense (good, price, date, e_type):
    Goods.append(good)
    Prices.append(price)
    Dates.append(date)
    Expense_type.append(e_type)

print("NOW IT'S TIME TO START RECORDING YOUR EXPENSES! Remember your objectives!")
print("")
print("Choose an option (e.g. 3)")
print("")
user_input = -1

while(user_input != 0):
    number = 0
    interests_list_number = 1
    tracker = {}
    tracker["Exit"] = 0
    for interest in interests_list:
        number += 0
        tracker[f"Add {interest} expense"] = number

    user_input = ''
    input_message = "EXPENSE TRACKER:\n"

    for i, item in enumerate(tracker):
        input_message += f'{i+1}. {item}\n'
    input_message += ''


    while user_input not in map(str, range(1, len(tracker) + 1)):
        user_input = input(input_message)
        tracker.get(user_input[:-1])

    print()

    user_input = int(user_input)

    if user_input != 1:
        e_type = (interests_list[user_input - 2])
        print(f"Adding {e_type}")


    elif user_input == 1:
        print("Exiting the program")
        print("")
        print(expense_report)
        print("")
        print(f"TOTAL EXPENSES: {sum(Prices)}/{money}")
        break

        
    else:
        print("You chose an incorrect option. Please try again")

    #allow the user to enter the good or service and the price
    if user_input != 1:
        good = input(f"Enter the good or service for the expense type {e_type}:")
        price = float(input("Enter the price of the good or service:\n"))
        today = date.today()
        new_expense(good, price, today, e_type)
        expense_report = pd.DataFrame()  
        expense_report["Goods"] = Goods
        expense_report["Prices"] = Prices
        expense_report["Dates"] = Dates
        expense_report["Expense type"] = Expense_type
        print(expense_report)
        print("")
        print(f"TOTAL EXPENSES: {sum(Prices)}/{money}")


    #print a new line
    print()

"""### CHECK TOTAL AND MAXIMUM EXPENSES PER CATEGORY AND MONEY LEFT PER CATEGORY"""

p = tuple(Prices)
e = tuple(Expense_type)
lista= pd.DataFrame({'Expense type': e,'$': p})
lista2 = lista.groupby(["Expense type"]).sum()
df2 = df.groupby(["CATEGORY"]).sum()
extracted_col = df2["MAX $"]
lista_final = lista2.join(extracted_col)
lista_final['MORE MONEY LEFT'] = np.where(lista_final['$'] <= lista_final['MAX $'], True, False) 
lista_final['MONEY LEFT'] = lista_final['MAX $'] - lista_final['$']
lista_final